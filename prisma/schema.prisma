// Schema para desenvolvimento local com SQLite
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                    String      @id @default(cuid())
  email                 String      @unique
  senha                 String
  nome                  String
  cpf                   String      @unique
  telefone              String
  tipoUsuario           String      // PAI_RESPONSAVEL, ESCOLA
  enderecoId            String?
  escolaId              String?
  emailVerificado       Boolean     @default(false)
  suspenso              Boolean     @default(false)
  tokenVerificacao      String?
  tokenResetSenha       String?
  tokenResetExpiracao   DateTime?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  endereco        Endereco?   @relation(fields: [enderecoId], references: [id])
  escola          Escola?     @relation(fields: [escolaId], references: [id])
  produtos        Produto[]   @relation("Vendedor")
  pedidos         Pedido[]    @relation("Comprador")
  avaliacoes      Avaliacao[] @relation("Avaliador")
  notificacoes    Notificacao[] @relation("Usuario")
  conversas1      Conversa[]  @relation("Usuario1")
  conversas2      Conversa[]  @relation("Usuario2")
  mensagensEnviadas    Mensagem[] @relation("Remetente")
  mensagensRecebidas   Mensagem[] @relation("Destinatario")

  @@map("usuarios")
}

model Escola {
  id          String    @id @default(cuid())
  nome        String
  cnpj        String    @unique
  enderecoId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  endereco    Endereco  @relation(fields: [enderecoId], references: [id])
  usuarios    Usuario[]
  produtos    Produto[]

  @@map("escolas")
}

model Endereco {
  id          String    @id @default(cuid())
  cep         String
  logradouro  String
  numero      String
  complemento String?
  bairro      String
  cidade      String
  estado      String
  tipo        String    // RESIDENCIAL, COMERCIAL, ENTREGA
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  usuarios    Usuario[]
  escolas     Escola[]

  @@map("enderecos")
}

model Produto {
  id              String    @id @default(cuid())
  nome            String
  descricao       String
  preco           Float
  precoOriginal   Float?
  categoria       String    // UNIFORME_NOVO, UNIFORME_USADO, MATERIAL_ESCOLAR, LIVRO
  condicao        String    // NOVO, SEMINOVO, USADO
  tamanho         String?
  cor             String?
  material        String?
  marca           String?
  imagens         String    // JSON string com array de URLs
  vendedorId      String
  vendedorNome    String?
  escolaId        String?
  escolaNome      String?
  ativo           Boolean   @default(true)
  statusAprovacao String    @default("PENDENTE") // PENDENTE, APROVADO, REJEITADO
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  vendedor        Usuario   @relation("Vendedor", fields: [vendedorId], references: [id])
  escola          Escola?   @relation(fields: [escolaId], references: [id])
  itensPedido     ItemPedido[]
  avaliacoes      Avaliacao[]

  @@map("produtos")
}

model Pedido {
  id              String    @id @default(cuid())
  numero          String    @unique
  compradorId     String
  status          String    // PENDENTE, PROCESSANDO, CONFIRMADO, ENVIADO, ENTREGUE, CANCELADO
  metodoPagamento String    // CARTAO_CREDITO, PIX, BOLETO
  total           Float
  subtotal        Float
  taxaServico     Float
  taxaHigienizacao Float?
  frete           Float
  enderecoEntrega String    // JSON string
  dataPedido      DateTime  @default(now())
  dataEntrega     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  comprador       Usuario   @relation("Comprador", fields: [compradorId], references: [id])
  itens           ItemPedido[]
  pagamentos      Pagamento[]

  @@map("pedidos")
}

model ItemPedido {
  id          String    @id @default(cuid())
  pedidoId    String
  produtoId   String
  quantidade  Int
  precoUnitario Float
  subtotal    Float
  createdAt   DateTime  @default(now())

  pedido      Pedido    @relation(fields: [pedidoId], references: [id])
  produto     Produto   @relation(fields: [produtoId], references: [id])

  @@map("itens_pedido")
}

model Pagamento {
  id              String    @id @default(cuid())
  pedidoId        String
  valor           Float
  metodo          String    // CARTAO_CREDITO, PIX, BOLETO
  status          String    // PENDENTE, PROCESSANDO, APROVADO, RECUSADO, CANCELADO
  transacaoId     String?   // ID da transação no gateway
  dataPagamento   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  pedido          Pedido    @relation(fields: [pedidoId], references: [id])

  @@map("pagamentos")
}

model Avaliacao {
  id          String    @id @default(cuid())
  produtoId   String
  avaliadorId String
  nota        Int       // 1-5
  comentario  String?
  createdAt   DateTime  @default(now())

  produto     Produto   @relation(fields: [produtoId], references: [id])
  avaliador   Usuario   @relation("Avaliador", fields: [avaliadorId], references: [id])

  @@map("avaliacoes")
}

model Notificacao {
  id        String    @id @default(cuid())
  usuarioId String
  titulo    String
  mensagem  String
  tipo      String    // INFO, SUCESSO, AVISO, ERRO
  lida      Boolean   @default(false)
  link      String?   // Link opcional para ação
  data      DateTime  @default(now())
  createdAt DateTime  @default(now())

  usuario   Usuario   @relation("Usuario", fields: [usuarioId], references: [id])

  @@map("notificacoes")
}

model Conversa {
  id          String    @id @default(cuid())
  produtoId   String
  usuario1Id  String
  usuario2Id  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  usuario1    Usuario   @relation("Usuario1", fields: [usuario1Id], references: [id])
  usuario2    Usuario   @relation("Usuario2", fields: [usuario2Id], references: [id])
  mensagens   Mensagem[]

  @@unique([produtoId, usuario1Id, usuario2Id])
  @@map("conversas")
}

model Mensagem {
  id              String    @id @default(cuid())
  conversaId      String
  remetenteId     String
  destinatarioId  String
  texto           String
  lida            Boolean   @default(false)
  dataLeitura     DateTime?
  deletadoPorRemetente      Boolean   @default(false)
  deletadoPorDestinatario   Boolean   @default(false)
  createdAt       DateTime  @default(now())

  conversa        Conversa  @relation(fields: [conversaId], references: [id], onDelete: Cascade)
  remetente       Usuario   @relation("Remetente", fields: [remetenteId], references: [id])
  destinatario    Usuario   @relation("Destinatario", fields: [destinatarioId], references: [id])

  @@map("mensagens")
}

model ModeloUniforme {
  id              String    @id @default(cuid())
  serie           String
  descricao       String
  tipo            String?   // CAMISA, CALÇA, SHORT, etc.
  cor             String?
  material        String?
  genero          String?   // MASCULINO, FEMININO, UNISSEX
  fornecedorId    Int?
  ativo           Boolean   @default(true)
  dataCadastro    DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  fornecedor      FornecedorUniforme? @relation(fields: [fornecedorId], references: [id])

  @@map("modelos_uniforme")
}

model TamanhoUniforme {
  id              String    @id @default(cuid())
  tamanho         String
  alturaMin       Int?
  alturaMax       Int?
  pesoMin         Float?
  pesoMax         Float?
  peitoMin        Int?
  peitoMax        Int?
  ordem           Int       @default(0)
  dataCadastro    DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("tamanhos_uniforme")
}

model FornecedorUniforme {
  id              Int       @id @default(autoincrement())
  nome            String
  email           String?
  telefone        String?
  endereco        String?
  status          String    @default("PENDENTE") // PENDENTE, ATIVO, INATIVO
  dataCadastro    DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  modelos         ModeloUniforme[]

  @@map("fornecedores_uniforme")
}