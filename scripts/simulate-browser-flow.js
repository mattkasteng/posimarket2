const fetch = require('node-fetch').default

// Simular localStorage do navegador
class MockLocalStorage {
  constructor() {
    this.store = {}
  }
  
  setItem(key, value) {
    this.store[key] = value
    console.log(`localStorage.setItem("${key}", ${typeof value === 'string' ? `"${value}"` : value})`)
  }
  
  getItem(key) {
    const value = this.store[key] || null
    console.log(`localStorage.getItem("${key}"): ${value ? (typeof value === 'string' ? `"${value}"` : value) : 'null'}`)
    return value
  }
  
  clear() {
    this.store = {}
    console.log('localStorage.clear()')
  }
}

// Simular window.location
const mockWindow = {
  location: {
    href: '',
    set href(url) {
      console.log(`window.location.href = "${url}"`)
      this._href = url
    },
    get href() {
      return this._href || ''
    }
  }
}

async function simulateBrowserFlow() {
  console.log('üåê SIMULANDO FLUXO COMPLETO DO NAVEGADOR\n')
  
  // Simular localStorage
  const localStorage = new MockLocalStorage()
  
  try {
    // 1. Login como vendedor
    console.log('1Ô∏è‚É£ FAZENDO LOGIN COMO VENDEDOR...')
    const response = await fetch('http://localhost:3000/api/auth/simple-login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'vendedor@teste.com',
        password: '123456'
      }),
    })

    if (!response.ok) {
      console.log('‚ùå Erro no login')
      return
    }

    const result = await response.json()
    console.log('‚úÖ Login bem-sucedido!')
    console.log('üë§ Usu√°rio:', result.user.nome)
    console.log('üè∑Ô∏è Tipo:', result.user.tipoUsuario)

    // 2. Simular exatamente o que o LoginForm faz
    console.log('\n2Ô∏è‚É£ SIMULANDO LOGINFORM...')
    localStorage.setItem('user', JSON.stringify(result.user))
    localStorage.setItem('isLoggedIn', 'true')
    
    console.log('‚úÖ Login vendedor bem-sucedido!')
    console.log('üë§ Usu√°rio vendedor salvo no localStorage:', result.user)
    console.log('üè∑Ô∏è Tipo de usu√°rio sendo salvo:', result.user.tipoUsuario)
    console.log('üîç Tipo como string:', `"${result.user.tipoUsuario}"`)
    console.log('üìè Length:', result.user.tipoUsuario.length)
    console.log('üî§ Char codes:', Array.from(result.user.tipoUsuario).map(c => c.charCodeAt(0)))
    console.log('üîÑ Redirecionando para /dashboard...')
    
    // Redirecionar para /dashboard
    mockWindow.location.href = '/dashboard'

    // 3. Simular exatamente o que a p√°gina /dashboard faz
    console.log('\n3Ô∏è‚É£ SIMULANDO P√ÅGINA /DASHBOARD...')
    
    const isLoggedIn = localStorage.getItem('isLoggedIn')
    const userData = localStorage.getItem('user')
    
    if (isLoggedIn === 'true' && userData) {
      const parsedUser = JSON.parse(userData)
      console.log('Usu√°rio logado:', parsedUser)
      
      console.log('üîÑ INICIANDO REDIRECIONAMENTO...')
      console.log('üë§ Usu√°rio:', parsedUser.nome)
      console.log('üìß Email:', parsedUser.email)
      console.log('üè∑Ô∏è Tipo:', parsedUser.tipoUsuario)
      console.log('üîç Tipo como string:', `"${parsedUser.tipoUsuario}"`)
      console.log('üìè Length:', parsedUser.tipoUsuario.length)
      console.log('üî§ Char codes:', Array.from(parsedUser.tipoUsuario).map(c => c.charCodeAt(0)))
      
      // Testar todas as compara√ß√µes poss√≠veis
      const isEscola = parsedUser.tipoUsuario === 'ESCOLA'
      const isPaiResponsavel = parsedUser.tipoUsuario === 'PAI_RESPONSAVEL'
      const isEscolaTrimmed = parsedUser.tipoUsuario.trim() === 'ESCOLA'
      const isPaiTrimmed = parsedUser.tipoUsuario.trim() === 'PAI_RESPONSAVEL'
      
      console.log('‚úÖ Compara√ß√µes:')
      console.log('  - === "ESCOLA":', isEscola)
      console.log('  - === "PAI_RESPONSAVEL":', isPaiResponsavel)
      console.log('  - trim() === "ESCOLA":', isEscolaTrimmed)
      console.log('  - trim() === "PAI_RESPONSAVEL":', isPaiTrimmed)
      
      if (isEscola || isEscolaTrimmed) {
        console.log('üö® REDIRECIONANDO PARA ADMIN!')
        console.log('‚ùå PROBLEMA: Vendedor sendo redirecionado para admin!')
        mockWindow.location.href = '/dashboard/admin'
      } else if (isPaiResponsavel || isPaiTrimmed) {
        console.log('‚úÖ REDIRECIONANDO PARA VENDEDOR!')
        console.log('‚úÖ CORRETO: Vendedor sendo redirecionado para vendedor!')
        mockWindow.location.href = '/dashboard/vendedor'
      } else {
        console.log('‚ùå TIPO DESCONHECIDO!')
        console.log('Tipo exato:', JSON.stringify(parsedUser.tipoUsuario))
        console.log('Tipo raw:', parsedUser.tipoUsuario)
      }
    } else {
      console.log('‚ùå Usu√°rio n√£o logado, redirecionando...')
      mockWindow.location.href = '/login'
    }

    console.log('\nüéØ RESULTADO FINAL:')
    console.log('URL final:', mockWindow.location.href)
    
    if (mockWindow.location.href === '/dashboard/vendedor') {
      console.log('‚úÖ SUCESSO: Redirecionamento correto para vendedor!')
    } else if (mockWindow.location.href === '/dashboard/admin') {
      console.log('‚ùå ERRO: Redirecionamento incorreto para admin!')
    } else {
      console.log('‚ùì RESULTADO INESPERADO:', mockWindow.location.href)
    }

  } catch (error) {
    console.error('‚ùå Erro:', error)
  }
}

simulateBrowserFlow()
