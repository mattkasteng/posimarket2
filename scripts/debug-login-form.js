const fetch = require('node-fetch').default

async function debugLoginForm() {
  console.log('üîç DEBUGGING LOGIN FORM - Simulando exatamente o que acontece')
  console.log('')

  try {
    // 1. Simular o que o bot√£o "Vendedor" faz
    console.log('1Ô∏è‚É£ Simulando clique no bot√£o "Vendedor"...')
    console.log('testLoginVendor() chamado')
    
    // 2. Simular a requisi√ß√£o para a API
    console.log('2Ô∏è‚É£ Fazendo requisi√ß√£o para /api/auth/simple-login...')
    const response = await fetch('http://localhost:3000/api/auth/simple-login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'vendedor@teste.com',
        password: '123456'
      }),
    })

    if (!response.ok) {
      console.log('‚ùå Erro na API:', response.status)
      return
    }

    const result = await response.json()
    console.log('‚úÖ Resposta da API recebida')
    console.log('üë§ Usu√°rio:', result.user.nome)
    console.log('üìß Email:', result.user.email)
    console.log('üè∑Ô∏è Tipo:', result.user.tipoUsuario)

    // 3. Simular o que o c√≥digo faz ap√≥s receber a resposta
    console.log('3Ô∏è‚É£ Simulando localStorage.setItem...')
    console.log('localStorage.setItem("user", JSON.stringify(result.user))')
    console.log('localStorage.setItem("isLoggedIn", "true")')

    // 4. Simular os logs do LoginForm
    console.log('4Ô∏è‚É£ Simulando logs do LoginForm...')
    console.log('‚úÖ Login vendedor bem-sucedido!')
    console.log('üë§ Usu√°rio vendedor salvo no localStorage:', result.user)
    console.log('üè∑Ô∏è Tipo de usu√°rio sendo salvo:', result.user.tipoUsuario)
    console.log('üîç Tipo como string:', `"${result.user.tipoUsuario}"`)
    console.log('üìè Length:', result.user.tipoUsuario.length)
    console.log('üî§ Char codes:', Array.from(result.user.tipoUsuario).map(c => c.charCodeAt(0)))
    console.log('üîÑ Redirecionando para /dashboard...')

    // 5. Simular a l√≥gica de redirecionamento DIRETO
    console.log('5Ô∏è‚É£ Simulando redirecionamento DIRETO...')
    console.log('üöÄ REDIRECIONAMENTO DIRETO...')
    console.log('Tipo do usu√°rio:', result.user.tipoUsuario)
    
    // Simular as compara√ß√µes
    const isEscola = result.user.tipoUsuario === 'ESCOLA'
    const isPaiResponsavel = result.user.tipoUsuario === 'PAI_RESPONSAVEL'
    
    console.log('üîç Compara√ß√µes:')
    console.log('  - result.user.tipoUsuario === "ESCOLA":', isEscola)
    console.log('  - result.user.tipoUsuario === "PAI_RESPONSAVEL":', isPaiResponsavel)
    
    // Simular a l√≥gica de redirecionamento
    if (result.user.tipoUsuario === 'ESCOLA') {
      console.log('üìç Redirecionando DIRETAMENTE para ADMIN')
      console.log('‚ùå PROBLEMA: Deveria redirecionar para VENDEDOR!')
      console.log('URL: /dashboard/admin')
    } else if (result.user.tipoUsuario === 'PAI_RESPONSAVEL') {
      console.log('üìç Redirecionando DIRETAMENTE para VENDEDOR')
      console.log('‚úÖ CORRETO: Redirecionamento correto!')
      console.log('URL: /dashboard/vendedor')
    } else {
      console.log('‚ùå Tipo desconhecido, redirecionando para dashboard geral')
      console.log('URL: /dashboard')
    }

    // 6. Verificar se h√° algo errado com o tipo
    console.log('6Ô∏è‚É£ Verifica√ß√£o detalhada do tipo...')
    console.log('Tipo raw:', result.user.tipoUsuario)
    console.log('Tipo JSON:', JSON.stringify(result.user.tipoUsuario))
    console.log('Tipo typeof:', typeof result.user.tipoUsuario)
    console.log('Tipo length:', result.user.tipoUsuario.length)
    
    // Verificar se h√° caracteres invis√≠veis
    const charCodes = Array.from(result.user.tipoUsuario).map(c => c.charCodeAt(0))
    console.log('Char codes:', charCodes)
    
    // Verificar se √© exatamente igual
    const expectedType = 'PAI_RESPONSAVEL'
    const isExactMatch = result.user.tipoUsuario === expectedType
    console.log('√â exatamente igual a "PAI_RESPONSAVEL":', isExactMatch)
    
    // Verificar se h√° espa√ßos ou caracteres especiais
    const trimmedType = result.user.tipoUsuario.trim()
    const isTrimmedMatch = trimmedType === expectedType
    console.log('√â igual ap√≥s trim():', isTrimmedMatch)

    console.log('')
    console.log('üéØ CONCLUS√ÉO:')
    if (isExactMatch) {
      console.log('‚úÖ O tipo est√° correto no backend')
      console.log('‚ùå O problema deve estar no frontend/navegador')
    } else {
      console.log('‚ùå O tipo est√° incorreto no backend')
      console.log('üîç Investigar banco de dados')
    }

  } catch (error) {
    console.error('‚ùå Erro:', error)
  }
}

debugLoginForm()
